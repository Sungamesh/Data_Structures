package binary;

//Binary search tree

public class BinarySearchTree {
	
	//create node class
	public class Node{
		int data;
		Node left, right;
		
		Node(int data){
			this.data = data;
			this.right = this.left = null;
		}
	}
	
	Node root;
	
	public BinarySearchTree() {
		root = null;
	}
	
	// insert data into Binary search tree (recursive)
	private Node insertion(Node root, int data) {
		if (root == null) {
			root = new Node(data);
			return root;
		}
		if(root.data > data) {
			root.left = insertion(root.left, data);
		}
		else if(root.data < data) {
			root.right = insertion(root.right, data);
		}
		
		return root;
	}
	
	// pre-order traversal (root, left, right)
	private void preOrder(Node root) {
		if(root == null) {
			return;
		}
		System.out.print(root.data+" ");
		preOrder(root.left);
		preOrder(root.right);
		
	}
	
	//in-order traversal (left, root, right)
	// sorted order
	private void inOrder(Node root) {
		if(root == null) {
			return;
		}
		
		inOrder(root.left);
		System.out.print(root.data+" ");
		inOrder(root.right);
		
	}
	
	//post-order traversal (left, right, root)
	private void postOrder(Node root) {
		if(root == null) {
			return;
		}
		
		postOrder(root.left);
		System.out.print(root.data+" ");
		postOrder(root.right);
		
	}

	public static void main(String[] args) {
		
		BinarySearchTree tree = new BinarySearchTree();
		
		int[] arr = {4, 2, 5, 1, 3};
		
		for(int i:arr) {
			tree.root = tree.insertion(tree.root, i);
		}
		tree.preOrder(tree.root);
		
		System.out.println();
		
		tree.inOrder(tree.root);
		
		System.out.println();
		
		tree.postOrder(tree.root);
	}

}
